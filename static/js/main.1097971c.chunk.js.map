{"version":3,"sources":["components/fontPicker/FontPicker.js","components/colorPicker/ColorPicker.js","App.js","serviceWorker.js","index.js"],"names":["FontPicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","fontsArray","fontsToApply","loading","currentFont","onChangeSearch","bind","assertThisInitialized","onCurrentFontChange","onClick","font","fontsList","push","setState","event","preventDefault","value","target","currentInput","_this2","includes","concat","toConsumableArray","WebFont","load","google","families","react_default","a","createElement","style","display","margin","type","onChange","defaultValue","map","item","i","key","fontFamily","Component","ColorPicker","handleChangeComplete","color","background","hex","objectsBackground","objectSpread","defineProperty","currentObject","objects","1","2","3","4","5","id","lib","width","onChangeComplete","className","App","FontPicker_FontPicker","ColorPicker_ColorPicker","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1097971c.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport fontsList from 'google-fonts-complete';\n\nimport WebFont from 'webfontloader';\n\nexport default class FontPicker extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      fontsArray: [],\n      fontsToApply: [],\n      loading: true,\n      currentFont: 'Roboto',\n    };\n    this.onChangeSearch = this.onChangeSearch.bind (this);\n    this.onCurrentFontChange = this.onCurrentFontChange.bind (this);\n    this.onClick = this.onClick.bind (this);\n  }\n\n  componentDidMount () {\n    let fontsArray = [];\n    for (const font in fontsList) {\n      fontsArray.push (font);\n    }\n    this.setState ({fontsArray, loading: false});\n  }\n\n  onChangeSearch (event) {\n    event.preventDefault ();\n    const {value} = event.target;\n    this.setState ({\n      currentInput: value,\n    });\n  }\n\n  onClick () {\n    const value = this.state.currentInput;\n    if (\n      this.state.fontsArray.includes (value) &&\n      !this.state.fontsToApply.includes (value)\n    ) {\n      this.setState (\n        {\n          fontsToApply: [...this.state.fontsToApply, value],\n        },\n        () => {\n          WebFont.load (\n            {\n              google: {\n                families: [value],\n              },\n            },\n            () => {\n              this.setState ({\n                currentFont: value,\n              });\n            }\n          );\n        }\n      );\n    }\n  }\n\n  onCurrentFontChange (event) {\n    const {value} = event.target;\n    this.setState ({\n      currentFont: value,\n    });\n  }\n\n  render () {\n    return this.state.loading\n      ? <div>Loading...</div>\n      : <div>\n          <div style={{display: 'inline'}}>\n            <input\n              style={{margin: '10px'}}\n              type=\"text\"\n              onChange={this.onChangeSearch}\n            />\n            <button onClick={this.onClick}>Add</button>\n          </div>\n          <select\n            onChange={this.onCurrentFontChange}\n            defaultValue={this.state.currentFont}\n          >\n            {this.state.fontsToApply.map ((item, i) => (\n              <option key={i}>{item}</option>\n            ))}\n          </select>\n          <p style={{fontFamily: this.state.currentFont}}>\n            The quick brown fox jumps over the lazy dog\n          </p>\n        </div>;\n  }\n}\n","import React, {Component} from 'react';\nimport {SketchPicker} from 'react-color';\nimport './ColorPicker.css';\n\nexport default class ColorPicker extends Component {\n  constructor (props) {\n    super (props);\n    this.state = {\n      objects: [1, 2, 3, 4, 5],\n      background: '#eee',\n      objectsBackground: {\n        1: '#eee',\n        2: '#eee',\n        3: '#eee',\n        4: '#eee',\n        5: '#eee',\n      },\n      currentObject: '0',\n    };\n    this.onClick = this.onClick.bind (this);\n  }\n\n  handleChangeComplete = color => {\n    this.setState ({\n      background: color.hex,\n      objectsBackground: {\n        ...this.state.objectsBackground,\n        [this.state.currentObject]: color.hex,\n      },\n    });\n  };\n\n  onClick (event) {\n    this.setState ({\n      currentObject: event.target.id,\n    });\n  }\n\n  render () {\n    return (\n      <div style={{display: 'flex'}}>\n        <div>\n          <SketchPicker\n            width=\"70%\"\n            color={this.state.background}\n            onChangeComplete={this.handleChangeComplete}\n          />\n        </div>\n        <div className=\"objects\">\n          {this.state.objects.map ((item, i) => (\n            <div\n              id={i}\n              key={item}\n              style={{background: this.state.objectsBackground[i]}}\n              onClick={this.onClick}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport FontPicker from './components/fontPicker/FontPicker';\nimport ColorPicker from './components/colorPicker/ColorPicker';\nimport './App.css';\n\nexport default class App extends Component {\n  render () {\n    return (\n      <div className=\"App\">\n        <FontPicker />\n        <ColorPicker />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render (<App />, document.getElementById ('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister ();\n"],"sourceRoot":""}